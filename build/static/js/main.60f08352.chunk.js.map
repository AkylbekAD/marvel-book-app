{"version":3,"sources":["components/appHeader/AppHeader.js","components/spinner/loading-gear.gif","components/errorMessage/error404.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/app/App.js","index.js"],"names":["AppHeader","className","href","ErrorMessage","src","img","alt","style","display","width","height","objectFit","margin","MarvelService","_apiBase","_apiKey","_baseOffset","getResource","url","a","fetch","result","ok","Error","status","json","getAllCharacters","offset","res","data","results","map","_transformCharacter","getOneCharacter","id","char","key","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","RandomChar","state","loading","error404","marvelService","onError404","setState","onCharLoading","onCharLoaded","updateChar","Math","floor","random","then","catch","this","errorMessage","spinner","loadingGear","content","onClick","mjolnir","Component","View","isImageFound","CharList","charsArray","loadingMore","charEnded","loadMoreRequest","onCharListLoading","loadMoreByScroll","window","removeEventListener","innerHeight","scrollY","document","body","offsetHeight","newCharsArray","ended","length","itemRefs","setRef","ref","push","focusOnItem","forEach","item","classList","remove","add","focus","console","log","addEventListener","arr","tabIndex","props","onCharSelected","onKeyPress","e","preRenderChars","disabled","Skeleton","CharInfo","charId","prevProps","err","info","skeleton","i","resourceURI","ErrorBoundary","error","errorInfo","children","App","selectedChar","decoration","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.60f08352.chunk.js","sourcesContent":["import './appHeader.scss';\n\nconst AppHeader = () => {\n    return (\n        <header className=\"app__header\">\n            <h1 className=\"app__title\">\n                <a href=\"#\">\n                    <span>Marvel</span> information portal\n                </a>\n            </h1>\n            <nav className=\"app__menu\">\n                <ul>\n                    <li><a href=\"#\">Characters</a></li>\n                    /\n                    <li><a href=\"#\">Comics</a></li>\n                </ul>\n            </nav>\n        </header>\n    )\n}\n\nexport default AppHeader;","export default __webpack_public_path__ + \"static/media/loading-gear.d0c247f1.gif\";","export default __webpack_public_path__ + \"static/media/error404.d0455bd5.gif\";","import img from './error404.gif';\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img\r\n      src={img}\r\n      alt=\"error 404\"\r\n      style={{\r\n        display: 'block',\r\n        width: '250px',\r\n        height: '250px',\r\n        objectFit: 'contain',\r\n        margin: '0 auto',\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","class MarvelService {\r\n  _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  _apiKey = 'apikey=805b4b6df4e4023c65c6fe3c7b9f1aa9';\r\n  _baseOffset = 210;\r\n\r\n  getResource = async (url) => {\r\n    //асинхронное получение данных с сервера по url\r\n    let result = await fetch(url); //ожидание резульатов запроса, defualt 30 секунд\r\n\r\n    if (!result.ok) {\r\n      // проверяет результат fetch на наличие ошибок при запросе данных, т.к. 404 для него не ошибка.\r\n      throw new Error(`Could not fetch ${url}, status: ${result.status}`); // если нет результата, создание ошибки и вывод\r\n    }\r\n\r\n    return await result.json(); // возвращение результата в виде promise в формате json\r\n  };\r\n\r\n  getAllCharacters = async (offset = this._baseOffset) => {\r\n    const res = await this.getResource(\r\n      `${this._apiBase}characters?limit=9&offset=${offset}&${this._apiKey}`\r\n    );\r\n    return res.data.results.map(this._transformCharacter); // формируем массив с полученными объектами преоброзовав их к state данным\r\n  };\r\n\r\n  getOneCharacter = async (id) => {\r\n    // асинхронный запрос на инфу 1 персонажа\r\n    const res = await this.getResource(\r\n      `${this._apiBase}characters/${id}?${this._apiKey}`\r\n    );\r\n    return this._transformCharacter(res.data.results[0]); // вызываем метод в конкесте передавая базовый путь к данным\r\n  };\r\n\r\n  _transformCharacter = (char) => {\r\n    // присваиваем и возвращаем полученные данные к state данным\r\n    return {\r\n      key: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : 'Sorry, there`s no information about this character',\r\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items.slice(0, 9),\r\n    };\r\n  };\r\n}\r\nexport default MarvelService;\r\n","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { Component } from 'react';\nimport loadingGear from '../spinner/loading-gear.gif';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport MarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nclass RandomChar extends Component {\n  state = {\n    char: {},\n    loading: true,\n    error404: false,\n  };\n\n  marvelService = new MarvelService();\n\n  componentDidMount() {\n    this.updateChar();\n  }\n\n  onError404 = () => {\n    this.setState({ loading: false, error404: true });\n  };\n\n  onCharLoading =() => { // показываем спинер до загрузки\n    this.setState({loading:true})\n  }\n\n  onCharLoaded = (char) => {\n    // просто перезаписываем state как только данные загрузились, меняем статус загрузки и ошибки\n    this.setState({ char, loading: false , error404: false});\n  };\n\n  updateChar = () => {\n    this.onCharLoading();\n\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n\n    this.marvelService\n      .getOneCharacter(id)\n      .then(this.onCharLoaded) // вызываем метод для 1 char и передаем его в метод onCharLoaded\n      .catch(this.onError404);\n  };\n\n  render() {\n    let { char, loading, error404 } = this.state;\n    const errorMessage = error404 ? <ErrorMessage /> : null;\n    const spinner = loading ? (\n      <img src={loadingGear} alt=\"loading...\" className=\"center\" />\n    ) : null;\n    const content = !(loading || error404) ? <View char={char} /> : null;\n\n    return (\n      <div className=\"randomchar\">\n        {errorMessage}\n        {spinner}\n        {content}\n        <div className=\"randomchar__static\">\n          <p className=\"randomchar__title\">\n            Random character for today!\n            <br />\n            Do you want to get to know him better?\n          </p>\n          <p className=\"randomchar__title\">Or choose another one</p>\n          <button onClick={this.updateChar} className=\"button button__main\">\n            <div className=\"inner\">try it</div>\n          </button>\n          <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst View = ({ char }) => {\n  const { name, description, thumbnail, homepage, wiki } = char;\n\n  let isImageFound = {\n    objectFit: 'cover',\n  };\n\n  if (\n    thumbnail ===\n    'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\n  ) {\n    isImageFound = {\n      'objectFit': 'contain',\n    };\n  }\n\n  return (\n    <div className=\"randomchar__block\">\n      <img\n        src={thumbnail}\n        alt=\"Random character\"\n        className=\"randomchar__img\"\n        style={isImageFound}\n      />\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">{description}</p>\n        <div className=\"randomchar__btns\">\n          <a href={homepage} className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RandomChar;\n","import { Component } from 'react';\nimport MarvelService from '../../services/MarvelService';\nimport PropTypes from 'prop-types';\n\nimport loadingGear from '../spinner/loading-gear.gif';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nclass CharList extends Component {\n  state = {\n    charsArray: [],\n    loading: true, \n    error404: false,\n    loadingMore: false, // отвечает за отключение фукнции кнопки Load more\n    offset: 9, // количество загружаемых персонажей\n    charEnded: false // проверка на конечность списка персонажей\n  };\n\n  marvelService = new MarvelService();\n\n  loadMoreRequest = (offset) => { // подгрузка 9 персонажей на страницу\n    this.onCharListLoading();\n    this.marvelService\n      .getAllCharacters(offset)\n      .then(this.onCharLoaded) // вызываем метод для 1 char и передаем его в метод onCharLoaded\n      .catch(this.onError404);\n  }\n\n  onCharListLoading = () => {\n      this.setState({\n        loadingMore: true\n      })\n  }\n\n  componentDidMount() {\n    this.loadMoreRequest();\n    window.addEventListener('scroll', this.loadMoreByScroll)\n  }\n\n  loadMoreByScroll = () => {\n    if (this.state.charEnded) window.removeEventListener('scroll', this.loadMoreByScroll)\n\n    if (!this.state.loading && !this.state.loadingMore) {\n        if (window.innerHeight + window.scrollY >= document.body.offsetHeight) {\n          this.loadMoreRequest(this.state.offset)\n        }\n     } \n  } \n\n  onError404 = () => {\n    this.setState({\n      loading: false, \n      error404: true \n  });\n  }\n\n  onCharLoaded = (newCharsArray) => {\n    // просто перезаписываем state как только данные загрузились, меняем статус загрузки и ошибки\n    let ended = false;\n    if (newCharsArray.length < 9) {\n       ended = true;\n    }\n    \n    this.setState(({offset, charsArray}) => ({\n        charsArray: [...charsArray, ...newCharsArray],\n        loading: false,\n        loadingMore: false,\n        offset: offset + 9,\n        charEnded: ended,\n    }))\n  }\n\n  itemRefs = [];\n\n  setRef = (ref) => {\n    this.itemRefs.push(ref);\n  }\n\n  focusOnItem = (key) => {\n    this.itemRefs.forEach(item => item.classList.remove('char__item_selected'));\n\n    this.itemRefs[key].classList.add('char__item_selected');\n    this.itemRefs[key].focus();\n    console.log(this.itemRefs)\n  }\n\n  preRenderChars (arr) {\n    const items = arr.map((item) => {\n      let { key, name, thumbnail} = item;\n      let isImageFound = {'objectFit': 'cover'};\n\n      if (\n        // проверка на отсутствующее изображение\n        thumbnail ===\n        'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\n      ) {\n        isImageFound = {\n          'objectFit': 'unset', // вписывание изображения об отсутствии\n        };\n      }\n\n      return (\n        <li \n          className=\"char__item\"\n          tabIndex={0}\n          key={key}\n          onClick={()=>{this.props.onCharSelected(key);} // передаем id в компонент App.js\n        }\n        onKeyPress={(e) => {\n          if (e.key === \"Enter\") {\n              this.props.onCharSelected(key);\n          }\n      }}>\n          <img src={thumbnail} alt={name} style={isImageFound} />\n          <div className=\"char__name\">{name}</div>\n        </li>\n      );\n    });\n\n    return <ul className=\"char__grid\">{items}</ul>;\n  };\n\n  render() {\n    const { charsArray, loading, error404, loadingMore, offset, charEnded} = this.state;\n\n    const items = this.preRenderChars(charsArray);\n\n    const errorMessage = error404 ? <ErrorMessage/> : null;\n    const spinner = loading ? <img src={loadingGear} alt=\"loading...\" className=\"center\" /> : null;\n    const content = !(loading || error404) ? items : null;\n\n    return (\n      <div className=\"char__list\">\n        {errorMessage}\n        {spinner} \n        {content}\n        <button className=\"button button__main button__long\"\n                disabled={loadingMore}\n                style={{'display': charEnded? 'none': 'block'}}\n                onClick={()=> this.loadMoreRequest(offset)}>\n          <div className=\"inner\">load more</div>\n        </button>\n      </div>\n    );\n  }\n}\n\nCharList.propTypes = {\n  onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { Component } from 'react';\nimport loadingGear from '../spinner/loading-gear.gif';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport MarvelService from '../../services/MarvelService';\n\nimport './charInfo.scss';\n\nclass CharInfo extends Component {\n    state = {\n        char: null,\n        loading: false,\n        error404: false,\n      };\n\n    marvelService = new MarvelService();\n\n    componentDidMount() {\n        this.updateChar();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.charId !== prevProps.charId){\n            this.updateChar();\n        }\n\n    }\n\n    componentDidCatch(err, info) {\n        console.log(err, info);\n        this.setState({error404:true});\n    }\n\n    updateChar = () => {\n        const {charId} = this.props;\n        if (!charId) {return}\n\n        this.onCharLoading();\n\n        this.marvelService\n            .getOneCharacter(charId)\n            .then(this.onCharLoaded)\n            .catch(this.onError404)\n    }\n\n    onError404 = () => {\n        this.setState({ loading: false, error404: true });\n      };\n    \n      onCharLoading =() => { // показываем спинер до загрузки\n        this.setState({loading:true})\n      }\n    \n      onCharLoaded = (char) => {\n        // просто перезаписываем state как только данные загрузились, меняем статус загрузки и ошибки\n        this.setState({ char, loading: false , error404: false});\n      };\n    \n    render() {\n\n        const {char, loading, error404} = this.state;\n        \n        const skeleton = char || loading || error404 ? null : <Skeleton/>;\n        const errorMessage = error404 ? <ErrorMessage /> : null;\n        const spinner = loading ? (\n          <img src={loadingGear} alt=\"loading...\" className=\"center\" />\n        ) : null;\n        const content = !(loading || error404 || !char) ? <View char={char} /> : null;\n\n        return (\n            <div className=\"char__info\">\n                {skeleton}\n                {spinner}\n                {errorMessage}\n                {content}\n            </div>\n        )\n    }\n}\n\nconst View = ({char}) => {\n\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n\n    let isImageFound = {\n        objectFit: 'cover',\n      };\n    \n      if (\n        // проверка на отсутствующее изображение\n        thumbnail ===\n        'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\n      ) {\n        isImageFound = {\n          'objectFit': 'contain', // вписывание изображения об отсутствии\n        };\n      }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                    <img src={thumbnail} alt={name} style={isImageFound}/>\n                    <div>\n                        <div className=\"char__info-name\">{name}</div>\n                        <div className=\"char__btns\">\n                            <a href={homepage} className=\"button button__main\">\n                                <div className=\"inner\">homepage</div>\n                            </a>\n                            <a href={wiki} className=\"button button__secondary\">\n                                <div className=\"inner\">Wiki</div>\n                            </a>\n                        </div>\n                    </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length === 0? 'Sorry, there is no comics with this character': null}\n                {\n                    comics.map((item, i)=> {\n                        return(\n                            <li key={i} className=\"char__comics-item\">\n                            <a href={item.resourceURI}>{item.name}</a>\n                            </li>\n                        )\n                        }\n                    )\n                }\n            </ul>  \n        </>\n    )\n}\n\nexport default CharInfo;","import { Component } from \"react\";\r\n\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log (error,errorInfo);\r\n\r\n        this.setState({\r\n            error:true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { Component } from \"react\";\n\nimport AppHeader from \"../appHeader/AppHeader\";\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\"\n\nimport decoration from '../../resources/img/vision.png';\n\nclass App extends Component {\n    state = {\n        selectedChar: null\n    }\n\n\n    onCharSelected = (id) => {\n        this.setState ({\n            selectedChar: id // значение необходимое для поиска по базе при клике на странице\n        })\n    }\n\n    render() {\n\n\n\n        return (\n            <div className=\"app\">\n                <AppHeader/>\n                <main>\n                    <ErrorBoundary>\n                        <RandomChar/>\n                    </ErrorBoundary>\n                    <div className=\"char__content\">\n                        <ErrorBoundary>\n                           <CharList onCharSelected={this.onCharSelected}/>\n                        </ErrorBoundary>\n                        <ErrorBoundary>\n                            <CharInfo charId={this.state.selectedChar}/>\n                        </ErrorBoundary>\n                    </div>\n                    <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n                </main>\n            </div>\n        )\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/App';\n\nimport './style/style.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}