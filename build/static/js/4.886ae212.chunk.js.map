{"version":3,"sources":["components/errorMessage/error404.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hooks.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/app/MainPage.js"],"names":["ErrorMessage","src","img","alt","style","display","width","height","objectFit","margin","useMarvelService","useState","loading","setLoading","error404","setError404","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","_baseOffset","getAllCharacters","offset","res","results","map","_transformCharacter","getOneCharacter","id","char","key","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","getComic","result","_transformComics","getAllComics","title","pageCount","language","textObjects","price","prices","View","isImageFound","className","href","RandomChar","setChar","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","Math","floor","random","then","errorMessage","spinner","loadingGear","content","onClick","mjolnir","CharList","props","charsArray","setCharsArray","loadingMore","setLoadingMore","setOffset","charEnded","setCharEnded","loadMoreRequest","window","addEventListener","onScroll","removeEventListener","event","innerHeight","pageYOffset","document","offsetHeight","newCharsArray","ended","length","itemRefs","useRef","arr","item","i","tabIndex","ref","el","current","onCharSelected","onKeyPress","e","forEach","classList","remove","add","focus","focusOnItem","preRenderChars","disabled","Skeleton","to","resourceURI","substring","CharInfo","charId","skeleton","ErrorBoundary","state","error","errorInfo","console","log","this","setState","children","Component","MainPage","selectedChar","decoration"],"mappings":"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","file":"static/js/4.886ae212.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error404.d0455bd5.gif\";","import img from './error404.gif';\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img\r\n      src={img}\r\n      alt=\"error 404\"\r\n      style={{\r\n        display: 'block',\r\n        width: '250px',\r\n        height: '250px',\r\n        objectFit: 'contain',\r\n        margin: '0 auto',\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import {useHttp} from '../hooks/http.hooks';\r\n\r\n\r\nconst useMarvelService = () => {\r\n  const {loading, request, error404, clearError} = useHttp();\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const _apiKey = 'apikey=805b4b6df4e4023c65c6fe3c7b9f1aa9';\r\n  const _baseOffset = 210; \r\n\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(\r\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformCharacter); // формируем массив с полученными объектами преоброзовав их к state данным\r\n  };\r\n\r\n  const getOneCharacter = async (id) => {\r\n    // асинхронный запрос на инфу 1 персонажа\r\n    const res = await request(\r\n      `${_apiBase}characters/${id}?${_apiKey}`\r\n    );\r\n    return _transformCharacter(res.data.results[0]); // вызываем метод в конкесте передавая базовый путь к данным\r\n  };\r\n\r\n  const _transformCharacter = (char) => {\r\n    // присваиваем и возвращаем полученные данные к state данным\r\n    return {\r\n      key: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : 'Sorry, there`s no information about this character',\r\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items.slice(0, 9),\r\n    };\r\n  };\r\n\r\n  const getComic = async (key) => {\r\n      const result = await request(`${_apiBase}comics/${key}?${_apiKey}`);\r\n      return _transformComics(result.data.results[0]);\r\n  }\r\n\r\n  const getAllComics = async (offset = _baseOffset) => {\r\n    const result = await request(\r\n      `${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`\r\n    );\r\n    return result.data.results.map(_transformComics); // формируем массив с полученными объектами преоброзовав их к state данным\r\n  };\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      key: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || 'There is no description',\r\n      pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n      language: comics.textObjects.language || 'en-us',\r\n      price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'Price not available'\r\n    }\r\n  }\r\n\r\n  return {loading, error404, getAllCharacters, getOneCharacter, getAllComics, getComic, clearError}\r\n}\r\n\r\nexport default useMarvelService;\r\n","import {useState, useCallback} from 'react';\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState (false);\r\n    const [error404, setError404] = useState (null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n        \r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`); // если нет результата, создание ошибки и вывод\r\n              }\r\n\r\n              const data = await response.json();\r\n\r\n              setLoading (false);\r\n              return data;\r\n\r\n        } catch (e) {\r\n              setLoading (false);\r\n              setError404 (e.message);\r\n              throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError404(false), []);\r\n\r\n    return {loading, request, error404, clearError}\r\n};","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport loadingGear from '../spinner/loading-gear.gif';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n  const [char, setChar] = useState({});\n\n  const {loading, error404, getOneCharacter, clearError} = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n    const timerId = setInterval(updateChar, 60000);\n\n    return () => {\n        clearInterval(timerId)\n    }\n  }, [])\n\n  const onCharLoaded = (char) => {\n    // просто перезаписываем state как только данные загрузились, меняем статус загрузки и ошибки\n    setChar (char);\n  };\n\n  const updateChar = () => {\n    clearError(); // очистка ошибки\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n\n    getOneCharacter(id)\n      .then(onCharLoaded) // вызываем метод для 1 char и передаем его в метод onCharLoaded\n  };\n\n    const errorMessage = error404 ? <ErrorMessage /> : null;\n    const spinner = loading ? (\n      <img src={loadingGear} alt=\"loading...\" className=\"center\" />\n    ) : null;\n    const content = !(loading || error404) ? <View char={char} /> : null;\n\n    return (\n      <div className=\"randomchar\">\n        {errorMessage}\n        {spinner}\n        {content}\n        <div className=\"randomchar__static\">\n          <p className=\"randomchar__title\">\n            Random character for today!\n            <br />\n            Do you want to get to know him better?\n          </p>\n          <p className=\"randomchar__title\">Or choose another one</p>\n          <button onClick={updateChar} className=\"button button__main\">\n            <div className=\"inner\">try it</div>\n          </button>\n          <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n        </div>\n      </div>\n    );\n  }\n\nconst View = ({ char }) => {\n  const { name, description, thumbnail, homepage, wiki } = char;\n\n  let isImageFound = {\n    objectFit: 'cover',\n  };\n\n  if (\n    thumbnail ===\n    'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\n  ) {\n    isImageFound = {\n      'objectFit': 'contain',\n    };\n  }\n\n  return (\n    <div className=\"randomchar__block\">\n      <img\n        src={thumbnail}\n        alt=\"Random character\"\n        className=\"randomchar__img\"\n        style={isImageFound}\n      />\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">{description}</p>\n        <div className=\"randomchar__btns\">\n          <a href={homepage} className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RandomChar;\n","import { useState, useEffect, useRef } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport PropTypes from 'prop-types';\n\nimport loadingGear from '../spinner/loading-gear.gif';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n  const [charsArray, setCharsArray] = useState ([])\n  const [loadingMore, setLoadingMore] = useState (false) // отвечает за отключение фукнции кнопки Load more\n  const [offset, setOffset] = useState (210) // id по загрузке новых персонажей\n  const [charEnded, setCharEnded] = useState (false) // проверка на конечность списка персонажей\n\n  const {loading, error404, getAllCharacters} = useMarvelService();\n\n  useEffect(() => { // первоначальная загрузка\n    loadMoreRequest(offset, true);\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('scroll', onScroll);\n    return () => window.removeEventListener ('scroll', onScroll);\n  }, []);\n\n  useEffect(() => { \n    if (loadingMore && !charEnded) {\n    setOffset (offset => offset + 9) \n    loadMoreRequest(offset);\n    }\n  }, [loadingMore]);\n\n  const onScroll = (event) => {\n    if (\n      window.innerHeight + window.pageYOffset >= document.body.offsetHeight\n    ) {\n        setLoadingMore(true);\n    }\n  };\n\n  const loadMoreRequest = (offset) => { // подгрузка 9 персонажей на страницу\n    getAllCharacters(offset)\n      .then(onCharLoaded) // вызываем метод для 1 char и передаем его в метод onCharLoaded\n  }\n\n  const onCharLoaded = (newCharsArray) => {\n    // просто перезаписываем state как только данные загрузились, меняем статус загрузки и ошибки\n\n    let ended = false;\n    if (newCharsArray.length < 9) {\n       ended = true;\n    }\n\n    setCharsArray (charsArray => [...charsArray, ...newCharsArray]);\n    setLoadingMore (false);\n    setOffset (offset => offset + 9);\n    setCharEnded (ended);\n  }\n\n  const itemRefs = useRef ([]);\n\n  const focusOnItem = (key) => {\n    itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n    itemRefs.current[key].classList.add('char__item_selected');\n    itemRefs.current[key].focus();\n  }\n\n  function preRenderChars (arr) {\n    const items = arr.map((item, i) => {\n      let { key, name, thumbnail} = item;\n      let isImageFound = {'objectFit': 'cover'};\n\n      if (\n        // проверка на отсутствующее изображение\n        thumbnail ===\n        'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\n      ) {\n        isImageFound = {\n          'objectFit': 'unset', // вписывание изображения об отсутствии\n        };\n      }\n\n      return (\n        <li \n          className=\"char__item\"\n          tabIndex={0}\n          ref={el => itemRefs.current[i] = el} // формируем список рефов на каждой итерации\n          key={key}\n          onClick={()=>{props.onCharSelected(key);} // передаем id в компонент App.js\n        }\n        onKeyPress={(e) => {\n          if (e.key === \"Enter\") {\n              props.onCharSelected(key);\n              focusOnItem(i)\n          }\n      }}>\n          <img src={thumbnail} alt={name} style={isImageFound} />\n          <div className=\"char__name\">{name}</div>\n        </li>\n      );\n    });\n\n    return <ul className=\"char__grid\">{items}</ul>;\n  };\n\n    const items = preRenderChars(charsArray);\n\n    const errorMessage = error404 ? <ErrorMessage/> : null;\n    const spinner = loading && !loadingMore ? <img src={loadingGear} alt=\"loading...\" className=\"center\" /> : null;\n\n    return (\n      <div className=\"char__list\">\n        {errorMessage}\n        {spinner}\n        {items}\n        <button className=\"button button__main button__long\"\n                disabled={loadingMore}\n                style={{'display': charEnded? 'none': 'block'}}\n                onClick={()=> loadMoreRequest(offset)}>\n          <div className=\"inner\">load more</div>\n        </button>\n      </div>\n    );\n  }\n\nCharList.propTypes = {\n  onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport loadingGear from '../spinner/loading-gear.gif';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport useMarvelService from '../../services/MarvelService';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {loading, error404, getOneCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId])\n\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {return}\n\n        clearError();\n        getOneCharacter(charId)\n            .then(onCharLoaded)\n    }\n    \n    const onCharLoaded = (char) => {\n        // просто перезаписываем state как только данные загрузились, меняем статус загрузки и ошибки\n        setChar (char);\n      }\n        \n        const skeleton = char || loading || error404 ? null : <Skeleton/>;\n        const errorMessage = error404 ? <ErrorMessage /> : null;\n        const spinner = loading ? (\n          <img src={loadingGear} alt=\"loading...\" className=\"center\" />\n        ) : null;\n        const content = !(loading || error404 || !char) ? <View char={char} /> : null;\n\n        return (\n            <div className=\"char__info\">\n                {skeleton}\n                {spinner}\n                {errorMessage}\n                {content}\n            </div>\n        )\n    }\n\nconst View = ({char}) => {\n\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n\n    let isImageFound = {\n        objectFit: 'cover',\n      };\n    \n      if (\n        // проверка на отсутствующее изображение\n        thumbnail ===\n        'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\n      ) {\n        isImageFound = {\n          'objectFit': 'contain', // вписывание изображения об отсутствии\n        };\n      }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                    <img src={thumbnail} alt={name} style={isImageFound}/>\n                    <div>\n                        <div className=\"char__info-name\">{name}</div>\n                        <div className=\"char__btns\">\n                            <a href={homepage} className=\"button button__main\">\n                                <div className=\"inner\">homepage</div>\n                            </a>\n                            <a href={wiki} className=\"button button__secondary\">\n                                <div className=\"inner\">Wiki</div>\n                            </a>\n                        </div>\n                    </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length === 0? 'Sorry, there is no comics with this character': null}\n                {\n                    comics.map((item, i)=> {\n                        return(\n                            <li key={i} className=\"char__comics-item\">\n                            <Link to={`/comics/${item.resourceURI.substring(43)}`}>{item.name}</Link>\n                            </li>\n                        )\n                        }\n                    )\n                }\n            </ul>  \n        </>\n    )\n}\n\nexport default CharInfo;","import { Component } from \"react\";\r\n\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log (error,errorInfo);\r\n\r\n        this.setState({\r\n            error:true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\"\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                    <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <CharInfo charId={selectedChar}/>\r\n                </ErrorBoundary>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;"],"sourceRoot":""}